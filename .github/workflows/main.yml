name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feat--modificar-archivo-de-workflow
    paths:
      - "API/**"
      - "client/**"
      - ".github/workflows/main.yml"
  pull_request:
    branches:
      - main
      - feat--modificar-archivo-de-workflow
    paths:
      - "API/**"
      - "client/**"
      - ".github/workflows/main.yml"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.x.x"

      - name: Restore dependencies (Backend)
        working-directory: ./API
        run: dotnet restore ../sistema-gestion-inventario.sln

      - name: Build backend
        working-directory: ./API
        run: dotnet build ../sistema-gestion-inventario.sln --configuration Release --no-restore

      - name: Publish backend
        working-directory: ./API
        run: dotnet publish ../sistema-gestion-inventario.sln --configuration Release --output ${{ github.workspace }}/publish_backend --no-build

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: ${{ github.workspace }}/publish_backend

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm"
          cache-dependency-path: ./client/package-lock.json

      - name: Install dependencies (Frontend)
        working-directory: ./client
        run: npm ci

      - name: Build frontend
        working-directory: ./client
        run: npm run build -- --configuration production

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./client/dist/client/browser

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feat--modificar-archivo-de-workflow')

    steps:
      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./publish_backend_temp

      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./dist_frontend_temp

      # --- PASOS DE DEPURACIÓN (déjalos por ahora para verificar rutas) ---
      - name: "Debug: Show contents of downloaded Backend Artifact on Runner"
        run: |
          echo "Content of publish_backend_temp on GitHub Actions runner:"
          ls -la ./publish_backend_temp
          ls -la ./publish_backend_temp/. # Esto mostrará el contenido real

      - name: "Debug: Show contents of downloaded Frontend Artifact on Runner"
        run: |
          echo "Content of dist_frontend_temp on GitHub Actions runner:"
          ls -la ./dist_frontend_temp
          ls -la ./dist_frontend_temp/. # Esto mostrará el contenido real
      # --- FIN PASOS DE DEPURACIÓN ---
      # =========================================================================
      # AHORA SEPARAMOS LA TRANSFERENCIA DE ARCHIVOS DE LA EJECUCIÓN DEL SCRIPT
      # =========================================================================

      # --- Despliegue del BACKEND (Transferencia) ---
      - name: Transfer Backend Files to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./publish_backend_temp/" # La ruta en el runner de GitHub Actions
          target: "/tmp/backend_deploy_temp_dir" # La NUEVA ruta temporal en el servidor remoto
          # SCP copiará el contenido de publish_backend_temp/ dentro de backend_deploy_temp_dir/
          # Es decir, en el servidor remoto, el backend estará en /tmp/backend_deploy_temp_dir/publish_backend_temp/

      - name: Deploy Backend on Server (Execute commands on remote server)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Crear el directorio de despliegue si no existe.
              sudo mkdir -p /var/www/kiosco-manager/publish
              sudo mkdir -p /var/www/kiosco-manager-frontend/browser
            # Crear script bash
            printf '#!/bin/bash\nset -e\n\necho "Iniciando despliegue de Backend en el servidor..."\n\nDEPLOY_PATH="/var/www"\nBACKEND_PATH="${DEPLOY_PATH}/kiosco-manager/publish"\nBACKEND_OLD_PATH="${DEPLOY_PATH}/kiosco-manager/publish_old"\n\nBACKEND_TRANSFER_ROOT="/tmp/backend_deploy_temp_dir"\nBACKEND_ACTUAL_TEMP_PATH="${BACKEND_TRANSFER_ROOT}/publish_backend_temp"\n\nrollback_backend() {\n  echo "Rollback de Backend iniciado..."\n  if [ -d "$BACKEND_TRANSFER_ROOT" ]; then\n      sudo rm -rf "$BACKEND_TRANSFER_ROOT"\n      echo "Directorio temporal del backend limpiado."\n  fi\n  if [ -d "$BACKEND_OLD_PATH" ]; then\n    sudo rm -rf "$BACKEND_PATH" || true\n    sudo mv "$BACKEND_OLD_PATH" "$BACKEND_PATH"\n    echo "Backend restaurado a versión anterior."\n  fi\n  sudo systemctl restart kioscomanager.service || true\n  echo "Rollback de Backend completado."\n}\ntrap rollback_backend ERR\n\nsudo systemctl stop kioscomanager.service || true\n\nsudo rm -rf "$BACKEND_OLD_PATH"\nsudo mv "$BACKEND_PATH" "$BACKEND_OLD_PATH" || true\n\nsudo mkdir -p "$BACKEND_PATH"\n\nif [ -d "$BACKEND_ACTUAL_TEMP_PATH" ]; then\n    sudo cp -r "${BACKEND_ACTUAL_TEMP_PATH}/." "$BACKEND_PATH/"\n    sudo rm -rf "$BACKEND_TRANSFER_ROOT"\nelse\n    echo "Error: El directorio de build del backend '"'"'${BACKEND_ACTUAL_TEMP_PATH}'"'"' no fue encontrado en el servidor. Abortando despliegue."\n    exit 1\nfi\n\nsudo chown -R ${{ secrets.SSH_USERNAME }}:${{ secrets.SSH_USERNAME }} "$BACKEND_PATH"\nsudo systemctl start kioscomanager.service\nsleep 5\nif ! sudo systemctl is-active --quiet kioscomanager.service; then\n  echo "Error: El servicio Backend no está activo después del despliegue."\n  exit 1\nfi\nsudo systemctl status kioscomanager.service --no-pager\necho "Despliegue de Backend completado."\n' > /tmp/deploy_backend_script.sh

            # Ejecutar el script con bash explícitamente
            /bin/bash /tmp/deploy_backend_script.sh

            # Limpiar el script temporal
            rm -f /tmp/deploy_backend_script.sh

      # --- Despliegue del FRONTEND (Transferencia) ---
      - name: Transfer Frontend Files to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./dist_frontend_temp/"
          target: "/tmp/frontend_deploy_temp_dir" # La NUEVA ruta temporal en el servidor remoto

      - name: Deploy Frontend on Server (Execute commands on remote server)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Crear script bash
            printf '#!/bin/bash\nset -e\n\necho "Iniciando despliegue de Frontend en el servidor..."\n\nDEPLOY_PATH="/var/www"\nFRONTEND_PATH="${DEPLOY_PATH}/kiosco-manager-frontend/browser"\nFRONTEND_OLD_PATH="${DEPLOY_PATH}/kiosco-manager-frontend/browser_old"\n\nFRONTEND_TRANSFER_ROOT="/tmp/frontend_deploy_temp_dir"\nFRONTEND_ACTUAL_TEMP_PATH="${FRONTEND_TRANSFER_ROOT}/dist_frontend_temp"\n\nrollback_frontend() {\n  echo "Rollback de Frontend iniciado..."\n  if [ -d "$FRONTEND_TRANSFER_ROOT" ]; then\n      sudo rm -rf "$FRONTEND_TRANSFER_ROOT"\n      echo "Directorio temporal del frontend limpiado."\n  fi\n  if [ -d "$FRONTEND_OLD_PATH" ]; then\n    sudo rm -rf "$FRONTEND_PATH" || true\n    sudo mv "$FRONTEND_OLD_PATH" "$FRONTEND_PATH"\n    echo "Frontend restaurado a versión anterior."\n  fi\n  sudo systemctl restart nginx || true\n  echo "Rollback de Frontend completado."\n}\ntrap rollback_frontend ERR\n\necho "Verificando estructura del artifact descargado..."\nls -la "$FRONTEND_TRANSFER_ROOT" || echo "No se pudo listar FRONTEND_TRANSFER_ROOT"\nls -la "$FRONTEND_ACTUAL_TEMP_PATH" || echo "No se pudo listar FRONTEND_ACTUAL_TEMP_PATH"\n\n# Verificar que el artifact contiene index.html\nif [ ! -f "$FRONTEND_ACTUAL_TEMP_PATH/index.html" ]; then\n    echo "Error: index.html no encontrado en el artifact. Estructura del artifact:"\n    find "$FRONTEND_TRANSFER_ROOT" -name "*.html" || echo "No se encontraron archivos HTML"\n    exit 1\nfi\n\necho "index.html encontrado correctamente en el artifact."\n\nsudo rm -rf "$FRONTEND_OLD_PATH"\nsudo mv "$FRONTEND_PATH" "$FRONTEND_OLD_PATH" || true\n\nsudo mkdir -p "$FRONTEND_PATH"\n\n# Copiar archivos del artifact al directorio de despliegue\nsudo cp -r "${FRONTEND_ACTUAL_TEMP_PATH}/." "$FRONTEND_PATH/"\nsudo rm -rf "$FRONTEND_TRANSFER_ROOT"\n\n# Verificar que index.html se copió correctamente\nif [ ! -f "$FRONTEND_PATH/index.html" ]; then\n    echo "Error: index.html no se copió correctamente al directorio de despliegue."\n    exit 1\nfi\n\necho "Archivos copiados correctamente. Estableciendo permisos..."\n\n# Establecer permisos correctos para nginx\nsudo chown -R www-data:www-data "$FRONTEND_PATH"\nsudo chmod -R 755 "$FRONTEND_PATH"\nsudo find "$FRONTEND_PATH" -type f -exec chmod 644 {} \\;\n\necho "Verificando contenido final del directorio de despliegue:"\nls -la "$FRONTEND_PATH"\n\nsudo systemctl restart nginx\nsleep 5\nif ! sudo systemctl is-active --quiet nginx; then\n  echo "Error: Nginx no está activo después del despliegue."\n  exit 1\nfi\nsudo nginx -t\necho "Despliegue de Frontend completado exitosamente."\n' > /tmp/deploy_frontend_script.sh

            # Ejecutar el script con bash explícitamente
            /bin/bash /tmp/deploy_frontend_script.sh

            # Limpiar el script temporal
            rm -f /tmp/deploy_frontend_script.sh
