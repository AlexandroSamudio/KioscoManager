name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - "API/**"
      - "client/**"
      - ".github/workflows/main.yml"
  pull_request:
    branches:
      - main
    paths:
      - "API/**"
      - "client/**"
      - ".github/workflows/main.yml"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.x.x"

      - name: Restore dependencies (Backend)
        working-directory: ./API
        run: dotnet restore ../sistema-gestion-inventario.sln

      - name: Build backend
        working-directory: ./API
        run: dotnet build ../sistema-gestion-inventario.sln --configuration Release --no-restore

      - name: Publish backend
        working-directory: ./API
        run: dotnet publish ../sistema-gestion-inventario.sln --configuration Release --output ${{ github.workspace }}/publish_backend --no-build

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: ${{ github.workspace }}/publish_backend

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm"
          cache-dependency-path: ./client/package-lock.json

      - name: Install dependencies (Frontend)
        working-directory: ./client
        run: npm ci

      - name: Build frontend
        working-directory: ./client
        run: npm run build -- --configuration production

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./client/dist/client

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./publish_backend_temp

      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./dist_frontend_temp

      # --- PASOS DE DEPURACIÓN---
      - name: "Debug: Show contents of downloaded Backend Artifact on Runner"
        run: |
          echo "Content of publish_backend_temp on GitHub Actions runner:"
          ls -la ./publish_backend_temp
          ls -la ./publish_backend_temp/.

      - name: "Debug: Show contents of downloaded Frontend Artifact on Runner"
        run: |
          echo "Content of dist_frontend_temp on GitHub Actions runner:"
          ls -la ./dist_frontend_temp
          ls -la ./dist_frontend_temp/.
      # --- FIN PASOS DE DEPURACIÓN ---

      # ---Despliegue del BACKEND---
      - name: Transfer Backend Files to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./publish_backend_temp/"
          target: "/tmp/backend_deploy_temp_dir/"
      - name: Deploy Backend on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            bash -c '
            echo "Iniciando despliegue de Backend en el servidor..."

            DEPLOY_PATH="/var/www"
            BACKEND_PATH="${DEPLOY_PATH}/mi-app/publish"
            BACKEND_OLD_PATH="${DEPLOY_PATH}/mi-app/publish_old"
            # Define la ruta temporal donde se copió el artefacto
            # Ahora la acción SCP copiará `publish_backend_temp` dentro de `backend_deploy_temp_dir`
            BACKEND_TRANSFER_BASE_PATH="/tmp/backend_deploy_temp_dir"
            BACKEND_TRANSFER_PATH="${BACKEND_TRANSFER_BASE_PATH}/publish_backend_temp"


            # Función de rollback para backend
            rollback_backend() {
              echo "Rollback de Backend iniciado..."
              # Limpiar el directorio temporal si existe un error
              if [ -d "$BACKEND_TRANSFER_BASE_PATH" ]; then
                  sudo rm -rf "$BACKEND_TRANSFER_BASE_PATH"
                  echo "Directorio temporal del backend limpiado."
              fi
              if [ -d "$BACKEND_OLD_PATH" ]; then
                sudo rm -rf "$BACKEND_PATH" || true # Borra el posible despliegue fallido
                sudo mv "$BACKEND_OLD_PATH" "$BACKEND_PATH"
                echo "Backend restaurado a versión anterior."
              fi
              sudo systemctl restart kioscomanager.service || true
              echo "Rollback de Backend completado."
            }
            trap rollback_backend ERR # Si algo falla en este bloque, se ejecuta el rollback

            sudo systemctl stop kioscomanager.service || true # Detener servicio (ignorar error si ya está detenido)
            
            # Limpiar y mover la versión anterior
            sudo rm -rf "$BACKEND_OLD_PATH" # Eliminar la copia antigua de la versión anterior
            sudo mv "$BACKEND_PATH" "$BACKEND_OLD_PATH" || true # Mover la versión actual a backup (ignorar error si no existe)

            # Asegurarse de que el directorio de destino exista antes de mover
            sudo mkdir -p "$BACKEND_PATH"
            # Verificar si el directorio transferido existe antes de copiar
            if [ -d "$BACKEND_TRANSFER_PATH" ]; then
                # Mover el contenido de la nueva versión transferida a su ubicación final
                sudo cp -r "${BACKEND_TRANSFER_PATH}/." "$BACKEND_PATH/"
                # Eliminar la carpeta temporal después de copiar
                sudo rm -rf "$BACKEND_TRANSFER_BASE_PATH"
            else
                echo "Error: El directorio de build del backend '${BACKEND_TRANSFER_PATH}' no fue encontrado en el servidor. Abortando despliegue."
                exit 1 # Forzar la falla si no se encuentra el artefacto transferido
            fi

            sudo chown -R ${{ secrets.SSH_USERNAME }}:${{ secrets.SSH_USERNAME }} "$BACKEND_PATH"
            sudo systemctl start kioscomanager.service
            sleep 5
            if ! sudo systemctl is-active --quiet kioscomanager.service; then
              echo "Error: El servicio Backend no está activo después del despliegue."
              exit 1 # Falla el job si el servicio no arranca
            fi
            sudo systemctl status kioscomanager.service --no-pager
            echo "Despliegue de Backend completado."
            '

      # ---Despliegue del FRONTEND (Transferencia + Lógica en servidor) ---
      - name: Transfer Frontend Files to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./dist_frontend_temp/"
          target: "/tmp/frontend_deploy_temp_dir/"

      - name: Deploy Frontend on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            bash -c '
            echo "Iniciando despliegue de Frontend en el servidor..."

            DEPLOY_PATH="/var/www"
            FRONTEND_PATH="${DEPLOY_PATH}/mi-app-frontend/browser"
            FRONTEND_OLD_PATH="${DEPLOY_PATH}/mi-app-frontend/browser_old"
            # Define la ruta temporal donde se copió el artefacto
            FRONTEND_TRANSFER_BASE_PATH="/tmp/frontend_deploy_temp_dir"
            FRONTEND_TRANSFER_PATH="${FRONTEND_TRANSFER_BASE_PATH}/dist_frontend_temp"

            # Función de rollback para frontend
            rollback_frontend() {
              echo "Rollback de Frontend iniciado..."
              # Limpiar el directorio temporal si existe un error
              if [ -d "$FRONTEND_TRANSFER_BASE_PATH" ]; then
                  sudo rm -rf "$FRONTEND_TRANSFER_BASE_PATH"
                  echo "Directorio temporal del frontend limpiado."
              fi
              if [ -d "$FRONTEND_OLD_PATH" ]; then
                sudo rm -rf "$FRONTEND_PATH" || true
                sudo mv "$FRONTEND_OLD_PATH" "$FRONTEND_PATH"
                echo "Frontend restaurado a versión anterior."
              fi
              sudo systemctl restart nginx || true
              echo "Rollback de Frontend completado."
            }
            trap rollback_frontend ERR # Si algo falla en este bloque, se ejecuta el rollback

            sudo rm -rf "$FRONTEND_OLD_PATH"
            sudo mv "$FRONTEND_PATH" "$FRONTEND_OLD_PATH" || true

            # Asegurarse de que el directorio de destino exista antes de copiar
            sudo mkdir -p "$FRONTEND_PATH"
            # Verificar si el directorio transferido existe antes de copiar
            if [ -d "$FRONTEND_TRANSFER_PATH" ]; then
                # Mover el contenido de la nueva versión transferida a su ubicación final
                sudo cp -r "${FRONTEND_TRANSFER_PATH}/." "$FRONTEND_PATH/"
                # Eliminar la carpeta temporal después de copiar
                sudo rm -rf "$FRONTEND_TRANSFER_BASE_PATH"
            else
                echo "Error: El directorio de build del frontend '${FRONTEND_TRANSFER_PATH}' no fue encontrado en el servidor. Abortando despliegue."
                exit 1 # Forzar la falla si no se encuentra el artefacto transferido
            fi

            sudo chown -R www-data:www-data "$FRONTEND_PATH"
            sudo chmod -R g+w "$FRONTEND_PATH"
            sudo chmod g+s "${DEPLOY_PATH}/mi-app-frontend"
            sudo systemctl restart nginx
            sleep 5
            if ! sudo systemctl is-active --quiet nginx; then
              echo "Error: Nginx no está activo después del despliegue."
              exit 1
            fi
            sudo nginx -t
            echo "Despliegue de Frontend completado."
            '