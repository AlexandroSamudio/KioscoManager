name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feat--test-cambios-workflow
    paths:
      - "API/**"
      - "client/**"
      - ".github/workflows/main.yml"
  pull_request:
    branches:
      - main
      - feat--test-cambios-workflow
    paths:
      - "API/**"
      - "client/**"
      - ".github/workflows/main.yml"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.x.x"

      - name: Restore dependencies (Backend)
        working-directory: ./API
        run: dotnet restore ../sistema-gestion-inventario.sln

      - name: Build backend
        working-directory: ./API
        run: dotnet build ../sistema-gestion-inventario.sln --configuration Release --no-restore

      - name: Test backend with coverage
        working-directory: ./API.Tests
        run: dotnet test --collect:"XPlat Code Coverage"

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate backend coverage report
        run: |
          COBERTURA_FILE=$(find ./API.Tests/TestResults -type f -name 'coverage.cobertura.xml' | head -n 1)
          if [ -z "$COBERTURA_FILE" ]; then echo "Cobertura file not found"; exit 1; fi
          echo "COBERTURA_FILE=$COBERTURA_FILE" >> $GITHUB_ENV
          reportgenerator -reports:"$COBERTURA_FILE" -targetdir:"./API.Tests/coveragereport" -reporttypes:"HtmlInline_AzurePipelines"

      - name: Enforce backend coverage threshold (>=70% lines)
        run: |
          FILE="$COBERTURA_FILE"
          RATE=$(grep -oP 'line-rate="\K[0-9.]+' "$FILE")
          PCT=$(awk -v r="$RATE" 'BEGIN{printf "%.0f", r*100}')
          echo "Backend line coverage: ${PCT}%"
          if [ "$PCT" -lt 70 ]; then echo "Coverage below 70%"; exit 1; fi

      - name: Upload Backend Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: |
            ./API.Tests/coveragereport
            ./API.Tests/TestResults/**/coverage.cobertura.xml

      - name: Publish backend
        working-directory: ./API
        run: dotnet publish ../sistema-gestion-inventario.sln --configuration Release --output ${{ github.workspace }}/publish_backend --no-build

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: ${{ github.workspace }}/publish_backend

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm"
          cache-dependency-path: ./client/package-lock.json

      - name: Install dependencies (Frontend)
        working-directory: ./client
        run: npm ci

      - name: Test frontend with coverage
        working-directory: ./client
        env:
          CI: "true"
        run: npm run test -- --coverage --runInBand

      - name: Enforce frontend coverage threshold (>=60% lines)
        working-directory: ./client
        run: |
          node -e "const s=require('./coverage/coverage-summary.json'); const pct=s.total.lines.pct; console.log('Frontend line coverage:', pct+'%'); if (pct < 60) { console.error('Coverage below 60%'); process.exit(1); }"

      - name: Upload Frontend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: ./client/coverage

      - name: Build frontend
        working-directory: ./client
        run: npm run build -- --configuration production

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./client/dist/client/browser

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feat--test-cambios-workflow')) || (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'feat--test-cambios-workflow'))

    steps:
      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./publish_backend_temp

      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./dist_frontend_temp

      # --- PASOS DE DEPURACIÓN (déjalos por ahora para verificar rutas) ---
      - name: "Debug: Show contents of downloaded Backend Artifact on Runner"
        run: |
          echo "Content of publish_backend_temp on GitHub Actions runner:"
          ls -la ./publish_backend_temp
          ls -la ./publish_backend_temp/. # Esto mostrará el contenido real

      - name: "Debug: Show contents of downloaded Frontend Artifact on Runner"
        run: |
          echo "Content of dist_frontend_temp on GitHub Actions runner:"
          ls -la ./dist_frontend_temp
          ls -la ./dist_frontend_temp/. # Esto mostrará el contenido real
      # --- FIN PASOS DE DEPURACIÓN ---
      # =========================================================================
      # AHORA SEPARAMOS LA TRANSFERENCIA DE ARCHIVOS DE LA EJECUCIÓN DEL SCRIPT
      # =========================================================================

      # --- Despliegue del BACKEND (Transferencia) ---
      - name: Transfer Backend Files to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./publish_backend_temp/" # La ruta en el runner de GitHub Actions
          target: "/tmp/backend_deploy_temp_dir" # La NUEVA ruta temporal en el servidor remoto
          # SCP copiará el contenido de publish_backend_temp/ dentro de backend_deploy_temp_dir/
          # Es decir, en el servidor remoto, el backend estará en /tmp/backend_deploy_temp_dir/publish_backend_temp/

      - name: Deploy Backend on Server (Execute commands on remote server)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Iniciando despliegue de Backend en el servidor..."
            set -eo pipefail

            # Detener servicio (sudo necesario)
            sudo systemctl stop kioscomanager.service || true

            # Crear directorio temporal si no existe
            mkdir -p /tmp/backend_deploy_temp_dir

            # Limpiar el directorio de publicación (ci-cd-deploy tiene permisos)
            sudo rm -rf /var/www/kiosco-manager/publish/*

            # Copiar los archivos desde el directorio temporal
            sudo cp -r /tmp/backend_deploy_temp_dir/publish_backend_temp/. /var/www/kiosco-manager/publish/

            # Limpiar el directorio temporal
            rm -rf /tmp/backend_deploy_temp_dir

            # Cambiar propietario a www-data (sudo necesario)
            sudo chown -R www-data:www-data /var/www/kiosco-manager/publish

            # Iniciar servicio (sudo necesario)
            sudo systemctl start kioscomanager.service

            # Esperar un momento para que arranque
            sleep 5

            # Verificar que el servicio esté activo
            if ! sudo systemctl is-active --quiet kioscomanager.service; then
              echo "Error: El servicio Backend no está activo después del despliegue."
              exit 1
            fi

            sudo systemctl status kioscomanager.service --no-pager
            echo "Despliegue de Backend completado exitosamente."


      # --- Despliegue del FRONTEND (Transferencia) ---
      - name: Transfer Frontend Files to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./dist_frontend_temp/"
          target: "/tmp/frontend_deploy_temp_dir" # La NUEVA ruta temporal en el servidor remoto

      - name: Deploy Frontend on Server (Execute commands on remote server)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Iniciando despliegue de Frontend en el servidor..."
            set -eo pipefail
            
            # Crear el directorio de despliegue si no existe.
            sudo mkdir -p /var/www/kiosco-manager-frontend/browser
            
            # Limpiar y copiar los archivos sin sudo
            sudo rm -rf /var/www/kiosco-manager-frontend/browser/*
            sudo cp -r /tmp/frontend_deploy_temp_dir/dist_frontend_temp/. /var/www/kiosco-manager-frontend/browser/
            
            # Limpiar el directorio temporal
            rm -rf /tmp/frontend_deploy_temp_dir
            
            # Cambiar el propietario a www-data (requiere sudo)
            sudo chown -R www-data:www-data /var/www/kiosco-manager-frontend/browser
            sudo chmod -R 755 /var/www/kiosco-manager-frontend/browser
            sudo find /var/www/kiosco-manager-frontend/browser -type f -exec chmod 644 {} \;
            echo "Contenido final en /var/www/kiosco-manager-frontend/browser:"
            sudo ls -la /var/www/kiosco-manager-frontend/browser | head -n 50
            
            # Reiniciar Nginx con sudo (requerido)
            sudo systemctl restart nginx
            
            sleep 5
            if ! sudo systemctl is-active --quiet nginx; then
              echo "Error: Nginx no está activo después del despliegue."
              exit 1
            fi
            
            sudo nginx -t
            echo "Despliegue de Frontend completado exitosamente."
